package main

import (
	"fmt"

	"github.com/gascore/gasx"
	"github.com/gascore/gasx/acss"
	"github.com/gascore/gasx/html"
)

const (
	lockFileName   = ".gaslock"
	platform       = "gopherjs"
	ignoreExternal = true
)

func main() {
	lockFile, err := gasx.GetLockFile(lockFileName, ignoreExternal)
	gasx.Must(err)

	htmlCompiler := html.NewCompiler()

	acssGen := acss.Generator{
		LockFile: lockFile,
		BreakPoints: map[string]string{
			"lg": "@media(min-width:1200px)",
			"md": "@media(min-width:1000px)",
			"sm": "@media(min-width:750px)",
		},
		Custom: map[string]string{
			"b": "1px solid #dedede",
		},
	}
	htmlCompiler.AddOnAttribute(acssGen.OnAttribute())

	builder := &gasx.Builder{
		LockFile: lockFile,
		BlockCompilers: []gasx.BlockCompiler{
			htmlCompiler.Block(),
		},
	}

	compileFiles(builder, lockFile.BuildExternal)

	builder.ClearDir("dist")
	builder.CopyDir("app/static", "dist")
	compileCode(builder, platform)
	builder.NewFile("dist/acss.css", acssGen.GetStyles()) // save css styles generated by acss
	builder.RunCommand("sass app/styles/main.scss dist/main.css")

	lockFile.Save()
	gasx.Log("Builded successfully!")
}

func compileFiles(builder *gasx.Builder, buildExternal bool) {
	gasx.Log("Compiling *.gox, *.gos")

	builder.RunCommand("chmod 777 -R $GOPATH/pkg/mod;")

	files, err := gasx.GasFiles([]string{"gos"}, buildExternal) // get files
	gasx.Must(err)

	gasx.Must(builder.ParseFiles(files)) // compile them
}

func compileCode(builder *gasx.Builder, platform string) {
	gasx.Log("Compiling code")
	switch platform {
	case "gopherjs":
		builder.RunCommand(fmt.Sprintf("cd app; gopherjs build -o ../dist/index.js; cd .."))
	case "wasm":
		builder.RunCommand(fmt.Sprintf("cd app; GOOS=js GOARCH=wasm go build -o ../dist/main.wasm; cd .."))
		builder.NewFile("dist/index.js", gasx.GetWASMExecScript())
	case "tinygo":
		gasx.ErrorMsg("comming soon(?)")
	default:
		gasx.ErrorMsg("invalid target platform")
	}
}
