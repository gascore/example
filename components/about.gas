<template>
    <div id="about" class="centerizeContent">
        <div class="contentBlock m(0) p(0)">
            <header class="contentBlock-title p(0,!important) m(0) w(100%) d(flex)">
                <div class="w(8%) d(flex) fz(28px)" g-html="svgEditIcon"></div>
                <input g-model="link" class="w(92%) bd(none) p(.8rem) bdrs(.4rem,.4rem,0,0)">
            </header>
            <div class="contentBlock-body">
                <div g-html="this.Get(`file`).(string)"></div>
            </div>
        </div>
    </div>
</template>

<script>
package components

import (
    r "github.com/gascore/std/router"
    "github.com/gascore/gas"
    . "github.com/gascore/example/store"
    "gitlab.com/golang-commonmark/markdown"
    "net/http"
    "bytes"
)

const svgEditIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="svg-icon m(auto)" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="edit-2"><rect width="24" height="24" opacity="0"/><path d="M19 20H5a1 1 0 0 0 0 2h14a1 1 0 0 0 0-2z"/><path d="M5 18h.09l4.17-.38a2 2 0 0 0 1.21-.57l9-9a1.92 1.92 0 0 0-.07-2.71L16.66 2.6A2 2 0 0 0 14 2.53l-9 9a2 2 0 0 0-.57 1.21L4 16.91a1 1 0 0 0 .29.8A1 1 0 0 0 5 18zM15.27 4L18 6.73l-2 1.95L13.32 6z"/></g></g></svg>`
const linkToGasReadMe = `https://raw.githubusercontent.com/gascore/gas/master/README.md`

func About(info r.RouteInfo) *gas.Component {
    return S.RC(gas.NC(
        &gas.C{
            Data: map[string]interface{} {
                "link": linkToGasReadMe,
                "file": "Loading...",
            },
            Watchers: map[string]gas.Watcher{
                "link": func(this *gas.C, new interface{}, old interface{}) error {
                    if new == "" {
                        new = linkToGasReadMe
                    }

                    this.Method("updateFile", new)
                    
                    return nil
                },
            },
			Hooks: gas.Hooks{
				Created: func(this *gas.Component) error {
                    this.Method("updateFile", linkToGasReadMe)
                    return nil
				},
			},
            Methods: map[string]gas.Method{
                "updateFile": func(this *gas.C, values ...interface{}) (interface{}, error) {
                    go func() {
                        resp, err := http.Get(values[0].(string))
                        if err != nil {
                            this.SetValue("file", `<h1><span style="color: #ff0033">404</span> Page not found</h1>`)
                            this.WarnError(err)
                            return
                        }

                        defer resp.Body.Close()
                        buf := new(bytes.Buffer)
                        buf.ReadFrom(resp.Body)

                        md := markdown.New(markdown.XHTMLOutput(true))
                        this.SetValue("file", md.RenderToString(buf.Bytes()))
                    }()
                    return nil, nil
                },
            },
        },
        aboutT,), nil)
}

var aboutT gas.GetComponentChildes
</script>