package components

import (
    "fmt"

    "github.com/gascore/gas"
    r "github.com/gascore/std/router"

    "github.com/gascore/std/components/modal"
    "github.com/gascore/std/components/tree"
    "github.com/gascore/std/components/layout"
    "github.com/gascore/std/components/vlist"
    dndFree  "github.com/gascore/std/components/dnd/free"
    dndLists "github.com/gascore/std/components/dnd/lists"
)

type ComponentsPage struct {
    c *gas.C
    i r.RouteInfo

    dndLists1 gas.DynamicElement
    dndLists2 gas.DynamicElement
    dndLists3 gas.DynamicElement
    dndListsA gas.DynamicElement
    dndTodo       []interface{}
    dndInProgress []interface{}
    dndDone       []interface{}
    dndA          []interface{}

    dndFree1 gas.DynamicElement
    dndFree2 gas.DynamicElement
    dndFree3 gas.DynamicElement
    dndFree4 gas.DynamicElement
    dndFree5 gas.DynamicElement

    isActiveModal bool
    modal         gas.DynamicElement

    tree1 *gas.E
    tree2 *gas.E

    layout1 gas.DynamicElement
    layout2 gas.DynamicElement
    layout3 gas.DynamicElement

    vItems []interface{}
    vList1 *gas.E
    vList2 *gas.E
}

func (root *ComponentsPage) toggleModal() {
    root.isActiveModal = !root.isActiveModal
    go root.c.Update()
}

func Components(info r.RouteInfo) *gas.E {
    root := &ComponentsPage{
        i: info,
        vItems: generateItems(),
        //vItemsHeight:  generateItemsHeights(),

        dndTodo:       []interface{}{"Pick up groceries", "Go home", "Fall asleep"},
        dndInProgress: []interface{}{"Get to work", "Check e-mail"},
        dndDone:       []interface{}{"Get up", "Brush teeth", "Take a shower", "Walk dog"},
        dndA:          []interface{}{"lorem", "ipsum", "dolore"},
    }

    root.dndLists1 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndTodo",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndLists2 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndInProgress",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndLists3 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndDone",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndListsA = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndA",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })

    root.dndFree1 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFree",
        Boundary: "main-body",
    })
    root.dndFree2 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFreeWithHandle",
        Handle:   "dndFree-handle",
        Boundary: "main-body",
    })
    root.dndFree3 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFree",
        Boundary: "dndFreeBoundary",
    })
    root.dndFree4 = dndFree.GetDNDFree(&dndFree.Config{
        Class:     "dndFree",
        Boundary:  "main-body",
        YDisabled: true,
    })
    root.dndFree5 = dndFree.GetDNDFree(&dndFree.Config{
        Class:     "dndFree",
        Boundary: "main-body",
        XDisabled: true,
    })

    root.modal = modal.GetModal(&modal.Config{
        IsActive: func() bool {
            return root.isActiveModal
        },
        Closer: func() {
            root.toggleModal()
        },
        ClassName: "modal-window",
    })

    root.tree1 = tree.GetTree(&tree.Config{
        Name:        "First",
        CanBeHidden: true,
        OnItemClick: func(item *tree.Item) error {
            fmt.Println("item in first tree was clicked")
            return nil
        },
        Items: []*tree.Item{
            {
                Name: "First element",
            },
            {
                Name: "Second element",
                IsDirectory: true,
                Childes: []*tree.Item{
                    {
                        Name: "First child",
                    },
                    {
                        Name: "Second child",
                    },
                },
            },
        },
    })
    root.tree2 = tree.GetTree(&tree.Config{
        Name: "Second",
        CanBeHidden: true,
        OnItemClick: func(item *tree.Item) error {
            fmt.Println("item clicked")
            return nil
        },
        Items: []*tree.Item{
            {
                Name: "First element",
                IsDirectory: true,
                Childes: []*tree.Item{
                    {
                        Name: "First element",
                        IsDirectory: true,
                        Childes: []*tree.Item{
                            {
                                Name: "First element",
                                IsDirectory: true,
                                Childes: []*tree.Item{
                                    {
                                        Name: "First element",
                                        IsDirectory: true,
                                        Childes: []*tree.Item{
                                            {
                                                Name: "First element",
                                                IsDirectory: true,
                                                Childes: []*tree.Item{
                                                    {
                                                        Name: "First child",
                                                    },
                                                    {
                                                        Name: "Second child",
                                                    },
                                                },
                                            },
                                            {
                                                Name: "Second element",
                                            },
                                        },
                                    },
                                    {
                                        Name: "Second element",
                                    },
                                },
                            },
                            {
                                Name: "Second element",
                            },
                        },
                    },
                    {
                        Name: "Second element",
                    },
                },
            },
            {
                Name: "Second element",
            },
        },
    })

    root.layout1 = layout.GetLayout(&layout.Config{
        Type:        false,
        LayoutClass: "layout",
        GutterSize:  9,
        // DragInterval: 15,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 30,
            },
            {
                Min:   20,
                Max:   90,
                Start: 40,
            },
            {
                Min:   10,
                Max:   90,
                Start: 30,
            },
        },
    })
    root.layout2 = layout.GetLayout(&layout.Config{
        Type:        true,
        LayoutClass: "layout2",
        GutterSize:  9,
        // DragInterval: 15,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 40,
            },
            {
                Min:   20,
                Max:   90,
                Start: 30,
            },
            {
                Min:   10,
                Max:   90,
                Start: 30,
            },
        },
    })
    root.layout3 = layout.GetLayout(&layout.Config{
        Type: false,
        LayoutClass: "layout3",
        GutterSize:  9,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 40,
            },
            {
                Min:   10,
                Max:   90,
                Start: 60,
            },
        },
    })

    root.vList1 = vlist.GetList(&vlist.Config{
        Direction:   	 true,
        Items:       	 root.vItems,
        ChildHeight: 	 64,
        ItemsWrapperTag: "ul",
        Change: func(start, end int) error {
            // this.ConsoleLog(start, end)
            return nil
        },
    }, root.vlistItem1)
    root.vList2 = vlist.GetList(&vlist.Config{
        Direction:       false,
        Items:           root.vItems,
        ChildWidth:      128,
        ChildHeight: 	 32,
        ItemsWrapperTag: "ul",
        Change: func(start, end int) error {
            // this.ConsoleLog(start, end)
            return nil
        },
    }, root.vlistItem2)

    c := &gas.C{
        Root: root,
    }
    root.c = c

    return c.Init()
}

func (root *ComponentsPage) vlistItem1(item interface{}, i, start int) *gas.E {
    return gas.NE(
        &gas.E{
            Tag: "li",
            Binds: map[string]gas.Bind{
                "style": func() string {
                    //return fmt.Sprintf(`height: %dpx;`, root.vItemsHeight[i+start])
                    return `height: 64px;`
                },
            },
        },
        item)
}

func (root *ComponentsPage) vlistItem2(item interface{}, i, start int) *gas.E {
    return gas.NE(
        &gas.E{
            Tag: "li",
            Binds: map[string]gas.Bind{
                "style": func() string {
                    //return fmt.Sprintf(`width: %dpx;`, root.vItemsHeight[i+start]*2)*/
                    return `width: 128px`
                },
            },
        },
        item)
}

func (root *ComponentsPage) DndListSet(listName string, arr []interface{}) {
    switch listName {
        case "dndTodo":
            root.dndTodo = arr
        case "dndInProgress":
            root.dndInProgress = arr
        case "dndDone":
            root.dndDone = arr
        case "dndA":
            root.dndA = arr
        default:
            root.c.ConsoleError("invalid listName in Set")
    }
}

func (root *ComponentsPage) DndListGet(listName string) []interface{} {
    switch listName {
        case "dndTodo":
            return root.dndTodo
        case "dndInProgress":
            return root.dndInProgress
        case "dndDone":
            return root.dndDone
        case "dndA":
            return root.dndA
        default:
            root.c.ConsoleError("invalid listName in Set")
            return []interface{}{}
    }
}

func (root *ComponentsPage) DndListUpdate() {
    root.c.Update()
}

func generateItems() []interface{} {
    var arr []interface{}
    for i := 0; i < 1000; i++ {
        arr = append(arr, fmt.Sprintf("item #%d", i+1))
    }
    return arr
}

/*func generateItemsHeights() []int {
    rand.Seed(time.Now().UnixNano())
    var arr []int
    for i := 0; i < 1000; i++ {
        arr = append(arr, rand.Intn(96-64)+64)
    }
    return arr
}*/