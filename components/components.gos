package components

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/gascore/std/components/layout"

	. "github.com/gascore/example/store"
	"github.com/gascore/gas"
	dndFree "github.com/gascore/std/components/dnd/free"
	dndLists "github.com/gascore/std/components/dnd/lists"
	"github.com/gascore/std/components/modal"
	"github.com/gascore/std/components/tree"
	"github.com/gascore/std/components/vlist"
	r "github.com/gascore/std/router"
)

type FormStructure struct {
	Name string
}

func Components(info r.RouteInfo) *gas.Component {
	return S.RC(gas.NC(
		&gas.C{
			Data: map[string]interface{}{
				"isActiveModal": false,
				"vItems":        generateItems(),
				"vItemsHeight":  generateItemsHeights(),

				"dndTodo":       []interface{}{"Pick up groceries", "Go home", "Fall asleep"},
				"dndInprogress": []interface{}{"Get to work", "Check e-mail"},
				"dndDone":       []interface{}{"Get up", "Brush teeth", "Take a shower", "Walk dog"},

				"lipsumTasks": []interface{}{"lorem", "ipsum", "dolore"},
			},
			Methods: map[string]gas.Method{
				"dndFreeConfig1": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					return dndFree.Config{
						Class: "dndFree",
						// XDisabled: true,
						// YDisabled: true,
						Boundary: "app",
					}, nil
				},
				"dndFreeConfig2": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					return dndFree.Config{
						Class:    "dndFreeWithHandle",
						Handle:   "dndFree-handle",
						Boundary: "app",
					}, nil
				},
				"dndFreeConfig3": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					return dndFree.Config{
						Class:    "dndFree",
						Boundary: "dndFreeBoundary",
					}, nil
				},
				"dndFreeConfig4": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					return dndFree.Config{
						Class:     "dndFree",
						Boundary:  "app",
						YDisabled: true,
					}, nil
				},
				"dndFreeConfig5": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					return dndFree.Config{
						Class:     "dndFree",
						Boundary:  "app",
						XDisabled: true,
					}, nil
				},

				"dndListsConfig": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return dndLists.Config{
						This:             this,
						Group:            "dnd",
						FieldName:        "dndTodo",
						GroupClass:       "dnd",
						PreviewClass:     "dnd-preview",
						PlaceholderClass: "dnd-placeholder",
					}, nil
				},
				"dndListsConfig2": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return dndLists.Config{
						This:             this,
						Group:            "dnd",
						FieldName:        "dndInprogress",
						GroupClass:       "dnd",
						PreviewClass:     "dnd-preview",
						PlaceholderClass: "dnd-placeholder",
					}, nil
				},
				"dndListsConfig3": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return dndLists.Config{
						This:             this,
						Group:            "dnd",
						FieldName:        "dndDone",
						GroupClass:       "dnd",
						PreviewClass:     "dnd-preview",
						PlaceholderClass: "dnd-placeholder",
					}, nil
				},
				"dndListsConfigA": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return dndLists.Config{
						This:             this,
						Group:            "dnd",
						FieldName:        "lipsumTasks",
						GroupClass:       "dnd",
						PreviewClass:     "dnd-preview",
						PlaceholderClass: "dnd-placeholder",

						Events: dndLists.EventsHandlers{
							Entered: func(event dndLists.EnteredEvent) (bool, error) {
								return true, nil
							},
						},
					}, nil
				},

				"layoutConfig": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return &layout.Config{
						Type:        true,
						LayoutClass: "layout",
						GutterSize:  12,
						// DragInterval: 15,
						Sizes: []layout.Size{
							{
								Min:   15,
								Max:   80,
								Start: 40,
							},
							{
								Min:   10,
								Max:   90,
								Start: 60,
							},
						},
					}, nil
				},
				"layoutConfig2": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return &layout.Config{
						Type:        false,
						LayoutClass: "layout2",
						GutterSize:  12,
						// DragInterval: 15,
						Sizes: []layout.Size{
							{
								Min:   15,
								Max:   80,
								Start: 40,
							},
							{
								Min:   10,
								Max:   90,
								Start: 60,
							},
						},
					}, nil
				},

				"getFirstTree": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return tree.Config{
						Name:        "First",
						CanBeHidden: true,

						Events: tree.Events{
							ItemClick: func(item tree.Item) error {
								this.ConsoleLog("item in first tree was clicked")
								return nil
							},
						},

						Items: []tree.Item{
							{
								Name: "First element",
							},
							{
								Name:        "Second element",
								IsDirectory: true,
								Childes: []tree.Item{
									{
										Name: "First child",
									},
									{
										Name: "Second child",
									},
								},
							},
						},
					}, nil
				},
				"getSecondTree": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return tree.Config{
						Name:        "Second",
						CanBeHidden: true,

						Events: tree.Events{
							ItemClick: func(item tree.Item) error {
								this.ConsoleLog("item clicked")
								return nil
							},
						},

						Items: []tree.Item{
							{
								Name:        "First element",
								IsDirectory: true,
								Childes: []tree.Item{
									{
										Name: "First child",
									},
									{
										Name: "Second child",
									},
								},
							},
							{
								Name: "Second element",
							},
						},
					}, nil
				},

				"getModal": func(this *gas.C, values ...interface{}) (interface{}, error) {
					return modal.Config{
						IsActive: this.Get("isActiveModal").(bool),
						Closer: func() error {
							this.SetValue("isActiveModal", false)
							return nil
						},
						ClassName: "customModal",
					}, nil
				},

				"vListConfig": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					config := &vlist.Config{
						Direction:   true,
						Items:       this.Get("vItems").([]interface{}),
						ChildHeight: 64,
						Change: func(start, end int) error {
							// this.ConsoleLog(start, end)
							return nil
						},
					}

					return config, nil
				},
				"vListConfig2": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					config := &vlist.Config{
						Direction:       false,
						Items:           this.Get("vItems").([]interface{}),
						ChildWidth:      128,
						ItemsWrapperTag: "ul",
						Change: func(start, end int) error {
							// this.ConsoleLog(start, end)
							return nil
						},
					}

					return config, nil
				},
			},
		},
		componentsT), nil)
}

func generateItems() []interface{} {
	var arr []interface{}
	for i := 0; i < 1000; i++ {
		arr = append(arr, fmt.Sprintf("item #%d", i))
	}
	return arr
}

func generateItemsHeights() []int {
	var arr []int
	for i := 0; i < 1000; i++ {
		rand.Seed(time.Now().UnixNano())
		arr = append(arr, rand.Intn(96-64)+64)
	}
	return arr
}

var componentsT gas.GetComponentChildes
