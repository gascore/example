<template>
    <div class="li-body bdt(1px,solid,#e6e6e6) fz(18px)">
        <div g-if="listType == 0" class="d(flex) p(.3rem,.6rem)">
            <button @click="pThis.Method(`markAsCompleted`, i)" class="no-btn m(0,.4rem,0,0)">
                <i class="icon icon-check c(#009966):h:f m(auto,0) h(2rem)"></i>
            </button>
            
            <div class="li-body_data w(100%) m(auto,0)">
                <span g-if="!this.Get(`isEditing`).(bool)" @dblclick="this.Method(`goEdit`)" class="w(100%)">
                    {{ el }}
                </span>
                <input 
                    g-else 
                    g-model="newValue" 
                    @keyup.enter="this.Method(`goCreate`)" 
                    class="c(#3b4351) w(100%) h(100%)"/>
            </div>

            <button g-if="!this.Get(`isEditing`).(bool)" @click="pThis.Method(`delete`, i, true)" class="no-btn m(0,0,0,auto)">
                <i class="icon icon-delete c(#ff0033):h:f m(auto,0)"></i>
            </button>
        </div>
        <div g-else class="p(.6rem,1.2rem)">
            <span class="w(100%)">
                {{ el }}
            </span>
        </div>
    </div>
</template>

<script>
package components

import (
    "github.com/gascore/gas"
)

func getLi(pThis *gas.Component, listType int, i int, el interface{}) interface{} {
    return gas.NewComponent(
        &gas.Component{
            Data: map[string]interface{}{
                "isEditing": false,
                "newValue": "no",
            },
            Methods: map[string]gas.Method{
                "goEdit": func(this *gas.Component, values ...interface{}) (interface{}, error) {
                    if listType != 0 {
                        return nil, nil
                    }

                    this.Set(map[string]interface{}{
                        "newValue": el,
                        "isEditing": true,
                    })

                    return nil, nil
                },
                "goCreate": func(this *gas.Component, values ...interface{}) (interface{}, error) {
                    newValue := this.Get("newValue")

                    this.SetValue("isEditing", false)

                    _, err := pThis.MethodSafely("edit", i, newValue)
                    if err != nil {
                        return nil, err
                    }

                    el = newValue

                    return nil, nil
                },
            },
        },
        liT,)
}

var liT gas.GetComponentChildes
</script>