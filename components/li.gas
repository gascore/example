<template>
    <div id="li-body">
        <button g-if="listType == 0" id="submit" @click="pThis.Method(`markAsCompleted`, i)">
            <i class="icon icon-check"></i>
        </button>
        <i g-if="!this.Get(`isEditing`).(bool)" @dblclick="this.Method(`goEdit`)">
            {{ el }}
        </i>
        <input g-if="this.Get(`isEditing`).(bool)" g-model="newValue" @keyup.enter="this.Method(`goCreate`)" />
        <button g-if="listType == 0" @click="pThis.Method(`delete`, i, true)" id="delete">
            <i class="icon icon-delete"></i>
        </button>
    </div>
</template>

<script>
package components

import (
    "github.com/gascore/gas"
)

func getLi(pThis *gas.Component, listType int, i int, el interface{}) interface{} {
    return gas.NewComponent(
        &gas.Component{
            Data: map[string]interface{}{
                "isEditing": false,
                "newValue": "no",
            },
            Methods: map[string]gas.Method{
                "goEdit": func(this *gas.Component, values ...interface{}) (interface{}, error) {
                    if listType != 0 {
                        return nil, nil
                    }

                    this.Set(map[string]interface{}{
                        "newValue": el,
                        "isEditing": true,
                    })

                    return nil, nil
                },
                "goCreate": func(this *gas.Component, values ...interface{}) (interface{}, error) {
                    newValue := this.Get("newValue")

                    this.SetValue("isEditing", false)

                    _, err := pThis.MethodSafely("edit", i, newValue)
                    if err != nil {
                        return nil, err
                    }

                    el = newValue

                    return nil, nil
                },
            },
        },
        liT,)
}

var liT gas.GetComponentChildes
</script>