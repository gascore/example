package components

import (
	"errors"

	"github.com/gascore/gas"
	r "github.com/gascore/std/router"

	. "github.com/gascore/example/store"
)

func nameByI(i string) string {
	switch i {
	case "0":
		return "all"
	case "1":
		return "completed"
	case "2":
		return "deleted"
	default:
		return "all"
	}
}

func iByName(name string) string {
	switch name {
	case "all":
		return "0"
	case "completed":
		return "1"
	case "deleted":
		return "2"
	default:
		return "0"
	}
}

var listsList = []interface{}{"0", "1", "2"}

func TodoList(i r.RouteInfo) *gas.Component {
	return S.RC(gas.NC(
		&gas.C{
			Data: map[string]interface{}{
				"currentList": iByName(i.Params["type"]),
				"currentText": "",
			},
			Methods: map[string]gas.Method{
				"isActive": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					if this.Get("currentList").(string) == values[0].(string) {
						return "active", nil
					} else {
						return "", nil
					}
				},
				"changeList": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					el, ok := values[0].(string)
					if !ok {
						return nil, errors.New("invalid index")
					}

					e, ok := values[1].(gas.Object)
					if !ok {
						return nil, errors.New("invalid preventDefault()")
					}
					e.Call("preventDefault")

					this.SetValue(`currentList`, el)

					i.ChangeRoute("/todo/"+nameByI(el), false)

					return nil, nil
				},
				"createNewTask": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					currentText := this.Get("currentText").(string)
					if len(currentText) == 0 {
						return nil, nil
					}

					err := S.Emit("appendToList", "all", currentText)
					if err != nil {
						return nil, err
					}

					this.SetValue("currentText", "")

					return nil, nil
				},
				"delete": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					i, ok := values[0].(int)
					if !ok {
						return nil, errors.New("invalid index")
					}

					appendToDeleted, ok := values[1].(bool)
					if !ok {
						return nil, errors.New("invalid appendToDeleted")
					}

					err := S.Emit("deleteFromAll", i, appendToDeleted)
					if err != nil {
						return nil, err
					}

					this.SetValue("currentText", "")

					return nil, nil
				},
				"markAsCompleted": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					i, ok := values[0].(int)
					if !ok {
						return nil, errors.New("invalid index")
					}

					err := S.Emit("completeInAll", i)
					if err != nil {
						return nil, err
					}

					return nil, nil
				},
				"edit": func(this *gas.Component, values ...interface{}) (interface{}, error) {
					i, ok := values[0].(int)
					if !ok {
						return nil, errors.New("invalid index")
					}

					newValue, ok := values[1].(string)
					if !ok {
						return nil, errors.New("invalid new value")
					}

					err := S.Emit("editAll", i, newValue)
					if err != nil {
						return nil, err
					}

					return nil, nil
				},
			},
		},
		todoT), nil)
}

var todoT gas.GetComponentChildes
