package components

import (
	"github.com/gascore/gas"
	r "github.com/gascore/std/router"

	. "github.com/gascore/wow/store"
)

func TodoList(info r.RouteInfo) *gas.E {
	root := &TodoPage{
		i: info,
		currentList: iByName(info.Params["type"]),
	}

	c := S.RC(&gas.C{
		Root: root,
		Watchers: map[string]gas.Watcher{
			"currentText": func(val interface{}, e gas.Object) (string, error) {
				if val != nil {
					root.currentText = val.(string)
				}

				return root.currentText, nil
			},
		},
	})
	root.c = c

	return c.Init()
}

type TodoPage struct {
	c *gas.C
	i r.RouteInfo

	currentList int
	currentText string
}

func (root *TodoPage) list() []interface{} {
	return S.Get(nameByI(root.currentList)).([]interface{})
}

func (root *TodoPage) createNewTask() {
	err := S.Emit("appendToList", "active", root.currentText)
	if err != nil {
		root.c.WarnError(err)
		return
	}

	root.currentText = ""
	root.c.UpdateWatchersValues("currentText", "")
	root.changeList(0)
}

func (root *TodoPage) changeList(i int) {
	root.currentList = i
	root.i.ChangeRoute("/todo/"+nameByI(i), false)
	go root.c.Update()
}

func (root *TodoPage) isActive(i int) string {
	if root.currentList == i {
		return "active"
	} else {
		return ""
	}
}

func nameByI(i int) string {
	switch i {
	case 0:
		return "active"
	case 1:
		return "completed"
	case 2:
		return "deleted"
	default:
		return "active"
	}
}

func iByName(name string) int {
	switch name {
	case "active":
		return 0
	case "completed":
		return 1
	case "deleted":
		return 2
	default:
		return 0
	}
}
