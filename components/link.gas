<template>
    <div id="link" class="nano-block">
        <div class="boxShadow page fz(22px) p(.8rem,1.2rem) d(flex) bg(#fff)">
            <div class="m(auto)">
                {{ this.Method("text") }}
            </div>
            <span class="pretty-btn m(0,.4rem)">
                <a g-bind:href="fmt.Sprintf(`https://github.com/gascore/%s`, i.Params[`name`])">
                    {{ i.Params["name"] }}
                </a>
            </span>
        </div>
        <div class="c(dark-gray) fz(14px) m(.3rem,0,0,.4rem)">
            <e run="i.LinkStatic(`/links`, false)">
                Back to all links
            </e>
        </div>
    </div>
</template>

<script>
package components

import (
    r "github.com/gascore/std/router"
    "github.com/gascore/gas"
    "fmt"
    "errors"
    . "github.com/gascore/example/store"
)

func Link(i r.RouteInfo) *gas.Component {
    return S.RC(gas.NC(
        &gas.C{
            Data: map[string]interface{} {
                "gas": "Gas - frontend golang framework",
                "example": "Gas framework example application",
                "gasx": "CLI for gas apps",
                "std": "Gas framework standard library",
            },
            Methods: map[string]gas.Method {
                "text": func(this *gas.Component, values ...interface{}) (interface{}, error) {
                      name := i.Params["name"]
                      switch name {
                          case "gas", "example", "gasx", "std":
                              return this.Get(name), nil
                          default:
                              return "404. Link is undefined", errors.New("Link is undefined")
                      }
                },
            },
        },
        linkT,), nil)
}

var linkT gas.GetComponentChildes
</script>