package pages

import (
	"github.com/gascore/gas"
	"github.com/gascore/std/router"
)

func (p *Pages) TodoList(info *router.RouteInfo) *gas.C {
	root := &TodoPage{
		i: info,
		ctx: p.RCtx,
		currentList: info.Params["type"],
	}

	c := &gas.C{
		Root: root,
	}
	root.c = c

	return c
}

type TodoPage struct {
	c *gas.C
	ctx *router.Ctx
	i *router.RouteInfo

	currentList string
	currentText string

	active    []string
	completed []string
	deleted   []string
}

func (root *TodoPage) Render() *gas.E {
	return $html{
	<div id="todo-page" class="nano-block">
		<div id="todoList" class="boxShadow light-bg">
			<div id="new" acss="w{100%} d{flex} bdrs{1.5rem 1.5rem 0 0}">
				<input 
					:value="root.currentText"
					@input="root.currentText = e.Value(); go root.c.Update()"
					@keyup.enter="root.createNewTask()" 
					id="new"
					placeholder="What needs to be done?" 
					class="form-input" acss="bd{none} w{88%} p{1.2em} bdrs{1.5rem 0 0 0} mih{4.5rem}" />
				<button class="no-btn" acss="w{10%} ml{2%} bdrs{0 1.5rem 0 1.5rem}" @click="root.createNewTask()">
					<svg xmlns="http://www.w3.org/2000/svg" class="svg-icon" acss="fz{2em} bg{none}" viewBox="0 0 24 24">
						<g data-name="Layer 2">
							<g data-name="arrow-ios-forward">
								<rect width="24" height="24" transform="rotate(-90 12 12)" opacity="0"/>
								<path d="M10 19a1 1 0 0 1-.64-.23 1 1 0 0 1-.13-1.41L13.71 12 9.39 6.63a1 1 0 0 1 .15-1.41 1 1 0 0 1 1.46.15l4.83 6a1 1 0 0 1 0 1.27l-5 6A1 1 0 0 1 10 19z"/>
							</g>
						</g>
					</svg>
				</button>
			</div>
			<ul class="todo-list" id="this-fucking-ul">
				<li g-for='i, el := range root.list()' acss="mt{0}">
					<e run="getLi(i, root.currentList, el, root)"></e>
				</li>
			</ul>
			<div id="todo-footer" acss="d{flex} p{.5rem 1.5rem} fz{18px} bdt{1px solid} bdc{color-lightGrey} bdrs{0 0 1.5rem 1.5rem}">
				<nav>
					<a @click="root.changeList(`active`)" :class="root.isActive(`active`)">
						Active
					</a>
					<a @click="root.changeList(`completed`)" :class="root.isActive(`completed`)">
						Completed
					</a>
					<a @click="root.changeList(`deleted`)" :class="root.isActive(`deleted`)">
						Deleted
					</a>
				</nav>
				<button @click="root.clear()" class="button clear" acss="ml{auto} fz{18px} p{4px}" id="todo-footer_clear">
					Clear
				</button>
			</div>
		</div>
		<div id="todoListFooter" acss="m{8px} c{gray} fz{12px}" g-if="root.currentList == `active`">
			<i>
				Double-click to edit a task
			</i>
		</div>
	</div>
	}$
}

func (root *TodoPage) list() []string {
	switch root.currentList {
	case "active":
		return root.active
	case "completed":
		return root.completed
	case "deleted":
		return root.deleted
	default:
		return []string{}
	}
}

func (root *TodoPage) clear() {
	switch root.currentList {
	case "active":
		root.active = []string{}
	case "completed":
		root.completed = []string{}
	case "deleted":
		root.deleted = []string{}
	}
	go root.c.Update()
}

func (root *TodoPage) createNewTask() {
	if root.currentText == "" {
		return
	}
	
	root.active = append(root.active, root.currentText)
	root.currentText = ""
	root.changeList("active")
	go root.c.Update()
}

func (root *TodoPage) Delete(i int) {
	deletedItem := root.active[i]
	root.active = append(root.active[:i], root.active[i+1:]...)
	root.deleted = append(root.deleted, deletedItem)
	go root.c.Update()
}

func (root *TodoPage) MarkAsDone(i int) {
	doneItem := root.active[i]
	root.active = append(root.active[:i], root.active[i+1:]...)

	root.completed = append(root.completed, doneItem)

	go root.c.Update()
}

func (root *TodoPage) Edit(i int, newValue string) {
	root.active[i] = newValue
	go root.c.Update()
}

func (root *TodoPage) changeList(name string) {
	root.currentList = name
	root.ctx.ChangeRoute("/todo/"+name, false)
	go root.c.Update()
}

func (root *TodoPage) isActive(name string) string {
	if root.currentList == name {
		return "active"
	} else {
		return ""
	}
}
