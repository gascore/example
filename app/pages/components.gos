package pages

import (
    "fmt"

    "github.com/gascore/gas"
    "github.com/gascore/std/router"

    "github.com/gascore/std/components/modal"
    "github.com/gascore/std/components/tree"
    "github.com/gascore/std/components/layout"
    "github.com/gascore/std/components/vlist"
    dndFree  "github.com/gascore/std/components/dnd/free"
    dndLists "github.com/gascore/std/components/dnd/lists"
)

func (p *Pages) Components(info *router.RouteInfo) *gas.C {
    root := &ComponentsPage{
        ctx : p.RCtx,
        vItems: generateItems(),

        dndTodo:       []interface{}{"Pick up groceries", "Go home", "Fall asleep"},
        dndInProgress: []interface{}{"Get to work", "Check e-mail"},
        dndDone:       []interface{}{"Get up", "Brush teeth", "Take a shower", "Walk dog"},
        dndA:          []interface{}{"lorem", "ipsum", "dolore"},
    }

    root.dndLists1 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndTodo",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndLists2 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndInProgress",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndLists3 = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndDone",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })
    root.dndListsA = dndLists.Lists(&dndLists.Config{
        This:             root,
        Group:            "dnd",
        FieldName:        "dndA",
        GroupClass:       "dnd",
        PreviewClass:     "dnd-preview",
        PlaceholderClass: "dnd-placeholder",
    })

    root.dndFree1 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFree",
        Boundary: "main-body",
    })
    root.dndFree2 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFreeWithHandle",
        Handle:   "dndFree-handle",
        Boundary: "main-body",
    })
    root.dndFree3 = dndFree.GetDNDFree(&dndFree.Config{
        Class:    "dndFree",
        Boundary: "dndFreeBoundary",
    })
    root.dndFree4 = dndFree.GetDNDFree(&dndFree.Config{
        Class:     "dndFree",
        Boundary:  "main-body",
        YDisabled: true,
    })
    root.dndFree5 = dndFree.GetDNDFree(&dndFree.Config{
        Class:     "dndFree",
        Boundary: "main-body",
        XDisabled: true,
    })

    root.modal = modal.GetModal(&modal.Config{
        IsActive: func() bool {
            return root.isActiveModal
        },
        Closer: func() {
            root.toggleModal()
        },
        ClassName: "modal-window",
    })

    root.tree1 = tree.Config{
        Name:        "First",
        CanBeHidden: true,
        OnItemClick: func(item *tree.Item) error {
            fmt.Println("item in first tree was clicked")
            return nil
        },
        Items: []*tree.Item{
            {
                Name: "First element",
            },
            {
                Name: "Second element",
                IsDirectory: true,
                Childes: []*tree.Item{
                    {
                        Name: "First child",
                    },
                    {
                        Name: "Second child",
                    },
                },
            },
        },
    }.Init()
    root.tree2 = tree.Config{
        Name: "Second",
        OnItemClick: func(item *tree.Item) error {
            fmt.Println("item clicked")
            return nil
        },
        Items: []*tree.Item{
            {
                Name: "First element",
                IsDirectory: true,
                Childes: []*tree.Item{
                    {
                        Name: "First element",
                        IsDirectory: true,
                        Childes: []*tree.Item{
                            {
                                Name: "First element",
                                IsDirectory: true,
                                Childes: []*tree.Item{
                                    {
                                        Name: "First element",
                                        IsDirectory: true,
                                        Childes: []*tree.Item{
                                            {
                                                Name: "First element",
                                                IsDirectory: true,
                                                Childes: []*tree.Item{
                                                    {
                                                        Name: "First child",
                                                    },
                                                    {
                                                        Name: "Second child",
                                                    },
                                                },
                                            },
                                            {
                                                Name: "Second element",
                                                IsDirectory: true,
                                                Childes: []*tree.Item{
                                                    {
                                                        Name: "First element",
                                                        IsDirectory: true,
                                                        Childes: []*tree.Item{
                                                            {
                                                                Name: "First element",
                                                                IsDirectory: true,
                                                                Childes: []*tree.Item{
                                                                    {
                                                                        Name: "First element",
                                                                        IsDirectory: true,
                                                                        Childes: []*tree.Item{
                                                                            {
                                                                                Name: "First element",
                                                                                IsDirectory: true,
                                                                                Childes: []*tree.Item{
                                                                                    {
                                                                                        Name: "First child",
                                                                                    },
                                                                                    {
                                                                                        Name: "Second child",
                                                                                    },
                                                                                },
                                                                            },
                                                                            {
                                                                                Name: "Second element",
                                                                            },
                                                                        },
                                                                    },
                                                                    {
                                                                        Name: "Second element",
                                                                    },
                                                                },
                                                            },
                                                            {
                                                                Name: "Second element",
                                                            },
                                                        },
                                                    },
                                                    {
                                                        Name: "Second element",
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    {
                                        Name: "Second element",
                                    },
                                },
                            },
                            {
                                Name: "Second element",
                            },
                        },
                    },
                    {
                        Name: "Second element",
                    },
                },
            },
            {
                Name: "Second element",
            },
        },
    }.Init()

    root.layout1 = layout.Config{
        Type:        false,
        LayoutClass: "layout",
        GutterSize:  9,
        // DragInterval: 15,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 30,
            },
            {
                Min:   20,
                Max:   90,
                Start: 40,
            },
            {
                Min:   10,
                Max:   90,
                Start: 30,
            },
        },
    }.Init()
    root.layout2 = layout.Config{
        Type:        true,
        LayoutClass: "layout2",
        GutterSize:  9,
        // DragInterval: 15,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 40,
            },
            {
                Min:   20,
                Max:   90,
                Start: 30,
            },
            {
                Min:   10,
                Max:   90,
                Start: 30,
            },
        },
    }.Init()
    root.layout3 = layout.Config{
        Type: false,
        LayoutClass: "layout3",
        GutterSize:  9,
        Sizes: []layout.Size{
            {
                Min:   15,
                Max:   80,
                Start: 40,
            },
            {
                Min:   10,
                Max:   90,
                Start: 60,
            },
        },
    }.Init()

    root.vList1 = vlist.GetList(&vlist.Config{
        Direction:   	 true,
        Items:       	 root.vItems,
        ChildHeight: 	 64,
        ItemsWrapperTag: "ul",
        Change: func(start, end int) error {
            // this.ConsoleLog(start, end)
            return nil
        },
    }, root.vlistItem1)
    root.vList2 = vlist.GetList(&vlist.Config{
        Direction:       false,
        Items:           root.vItems,
        ChildWidth:      128,
        ChildHeight: 	 32,
        ItemsWrapperTag: "ul",
        Change: func(start, end int) error {
            // this.ConsoleLog(start, end)
            return nil
        },
    }, root.vlistItem2)

    c := &gas.C{
        Root: root,
    }
    root.c = c

    return c
}

type ComponentsPage struct {
    c *gas.C
    ctx *router.Ctx

    dndLists1 gas.DynamicComponent
    dndLists2 gas.DynamicComponent
    dndLists3 gas.DynamicComponent
    dndListsA gas.DynamicComponent
    dndTodo       []interface{}
    dndInProgress []interface{}
    dndDone       []interface{}
    dndA          []interface{}

    dndFree1 gas.DynamicComponent
    dndFree2 gas.DynamicComponent
    dndFree3 gas.DynamicComponent
    dndFree4 gas.DynamicComponent
    dndFree5 gas.DynamicComponent

    isActiveModal bool
    modal         gas.DynamicComponent

    tree1 *gas.C
    tree2 *gas.C

    layout1 gas.DynamicComponent
    layout2 gas.DynamicComponent
    layout3 gas.DynamicComponent

    vItems []interface{}
    vList1 *gas.C
    vList2 *gas.C
}

func (root *ComponentsPage) Render() *gas.E {
    return $html{
    <div id="components" class="mini-block blocksList">
        <section class="contentBlock">
            <header class="contentBlock-title">
                Basic Drag and drop
            </header>
            <section class="contentBlock-body dndFreeBoundary">
                <e run="root.dndFree1()">
                    Basic example
                </e>
                <e run="root.dndFree2()">
                    <span>Handle only</span>
                    <i class="icon icon-menu dndFree-handle"></i>
                </e>
                <e run="root.dndFree3()">
                    <span>Bounded in div</span>
                </e>
                <e run="root.dndFree4()">
                    <span>Ydispabled</span>
                </e>
                <e run="root.dndFree5()">
                    <span>Xdispabled</span>
                </e>
            </section>
        </section>
        <section class="contentBlock">
            <header class="contentBlock-title">
                Virtual list
            </header>

            <section class="contentBlock-body">
                <div class="vlist-contentBlock" acss="h{70vw} h{50vw}@sm h{25vw}@md mb{1em}">
                    <e run="root.vList1"></e>
                </div>
                <div class="vlist-contentBlock" acss="h{25vw} h{15vw}@sm h{5vw}@md w{100%}" id="vlist-vert">
                    <e run="root.vList2"></e>
                </div>
            </section>
        </section>
        <section class="contentBlock">
            <header class="contentBlock-title">
                Layout
            </header>
            <section class="contentBlock-body">
                <div id="layout-contentBlock">
                    <e run="root.layout1()">
                        <div class="layout-item-bd">
                            Vanilla
                        </div>
                        <div acss='w{100%} h{100%}'>
                            <e run="root.layout2()">
                                <div class="layout-item-bd">
                                    GopherJS
                                </div>
                                <div acss='w{100%} h{100%}'>
                                    <e run="root.layout3()">
                                        <div class="layout-item-bd">
                                            WebAssembly
                                        </div>
                                        <div class="layout-item-bd">
                                            TinyGo
                                        </div>
                                    </e>
                                </div>
                                <div class="layout-item-bd">
                                    The Joy Compiler
                                </div>
                            </e>
                        </div>
                        <div class="layout-item-bd">
                            CGOC
                        </div>
                    </e>
                </div>
            </section>
        </section>
        <section class="contentBlock">
            <header class="contentBlock-title">
                Modal
            </header>

            <section class="contentBlock-body">
                <button class="pretty-btn" acss="fz{1.8rem}" @click="root.toggleModal()">
                    <span g-if="root.isActiveModal">
                        Hide
                    </span>
                    <span g-else>
                        Show
                    </span>
                </button>
                <e run="root.modal()">
                    <div acss="p{.8rem}">
                        <header class="modal-window_header" acss="d{flex} p{0} m{0 0 .5rem 0}">
                            <h3 acss="m{0}">
                                Header inside modal window
                            </h3>
                            <button class="no-btn" acss="ml{auto !important} fz{22px !important} cur{pointer}" @click="root.toggleModal()">
                            	<svg xmlns="http://www.w3.org/2000/svg" class="svg-icon w(1.3em) h(1.3em)" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="close"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z"/></g></g></svg>
			                </button>
                        </header>
                        <div class="modal-window_body">
                            <p acss="mb(0)">
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque tincidunt viverra vestibulum. Cras finibus convallis ipsum, sit amet finibus justo dapibus non. Maecenas ultrices velit ac nunc convallis pulvinar. In a hendrerit mi. Nulla orci nisi, tempus quis rhoncus vitae, ornare sit amet risus. Nullam eleifend velit tempor pharetra pretium. Fusce blandit felis a volutpat convallis. Nulla volutpat in purus nec luctus. Donec eget placerat purus, vel faucibus enim. Vivamus a posuere felis, eu sagittis eros.
                            </p>
                        </div>
                    </div>
                </e>
            </section>
        </section>
        <!--<section class="contentBlock">
            <header class="contentBlock-title">
                <div>
                    Drag and drop linked lists
                </dvi>
                <div acss="c{#ff0033} fz{.8rem}">
                    Broken. Will fix soon
                </div>
            </header>
            
            <section class="contentBlock-body">
                <div id="dnds" acss="d{flex} fxf{row wrap} p{0}">
                    <div id="dnd1">
                        <h3>
                            To do
                        </h3>  
                        <e run="root.dndLists1()">
                            <div g-for='_, item := range root.dndTodo">
                                {{ item }}
                            </div>
                        </e>
                    </div>
                    <div id="dnd2">
                        <h3>
                            In progress
                        </h3>
                        <e run="root.dndLists2()">
                            <div g-for='_, item := range root.dndInProgress'>
                                {{ item }}
                            </div>
                        </e>
                    </div>
                    <div id="dnd3">
                        <h3>
                            Done
                        </h3>
                        <e run="root.dndLists3()">
                            <div g-for='_, item := range root.dndDone'>
                                {{ item }}
                            </div>
                        </e>
                    </div>
                    <div id="dndA">
                        <h3>
                            Lipsum
                        </h3>
                        <e run="root.dndListsA()">
                            <div g-for='_, item := range root.dndA'>
                                {{ item }}
                            </div>
                        </e>
                    </div>
                </div>
            </section>
        </section>-->
        <section class="contentBlock">
            <header class="contentBlock-title">
                Tree
            </header>
            <section class="contentBlock-body">
                <div id="trees">
                    <e run="root.tree1"></e>
                    <e run="root.tree2"></e>
                </div>
            </section>
        </section>
        <div acss="d{flex} mb{.7rem}">
            <e run='root.ctx.Link("/examples")' class="pretty-btn" acss="d{flex} m{0}">
                <i class="icon icon-back" acss="m{auto 0 auto .4em} fz{12px} c{#fff}"></i>
                <span acss="fz{16px} d{block}">
                    Basic examples
                </span>
            </e>
        </div>
    </div>
    }$
}

func (root *ComponentsPage) toggleModal() {
    root.isActiveModal = !root.isActiveModal
    go root.c.Update()
}

func (root *ComponentsPage) vlistItem1(item interface{}, i, start int) *gas.E {
    return $htmlEl{
        <li style="height:64px;">
            {{ item }}
        </li>
    }$
}

func (root *ComponentsPage) vlistItem2(item interface{}, i, start int) *gas.E {
    return $htmlEl{
        <li style="width:128px;">
            {{ item }}
        </li>
    }$
}

func (root *ComponentsPage) DndListSet(listName string, arr []interface{}) {
    switch listName {
        case "dndTodo":
            root.dndTodo = arr
        case "dndInProgress":
            root.dndInProgress = arr
        case "dndDone":
            root.dndDone = arr
        case "dndA":
            root.dndA = arr
        default:
            root.c.ConsoleError("invalid listName in Set")
    }
}
func (root *ComponentsPage) DndListGet(listName string) []interface{} {
    switch listName {
        case "dndTodo":
            return root.dndTodo
        case "dndInProgress":
            return root.dndInProgress
        case "dndDone":
            return root.dndDone
        case "dndA":
            return root.dndA
        default:
            root.c.ConsoleError("invalid listName in Set")
            return []interface{}{}
    }
}
func (root *ComponentsPage) DndListUpdate() {
    root.c.Update()
}

func generateItems() []interface{} {
    var arr []interface{}
    for i := 0; i < 1000; i++ {
        arr = append(arr, fmt.Sprintf("item #%d", i+1))
    }
    return arr
}
