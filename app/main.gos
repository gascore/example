package main

import (
    "fmt"
    "time"
    
    "github.com/gascore/dom"

    "github.com/gascore/gas"
    "github.com/gascore/gas/web"
    r "github.com/gascore/std/router"
)

func main() {
    fmt.Println("Hello stranger!ðŸ‘‹")

    app := &App{
        rCtx: InitRouter(),
        htmlEl: dom.Doc.GetElementsByTagName("html")[0], // save <html/> for change theme
    }
    c := &gas.C{Root: app}
    app.c = c

    err := web.Init(c, "app")
    if err != nil {
        panic(err)
    }

    web.KeepAlive()
}

type App struct {
    c *gas.C
    rCtx *r.Ctx
    isDark bool
    htmlEl *dom.Element
}

func (root *App) Render() []interface{} {
    ctx := root.rCtx
    return $html{
        <div id="app-wrap">
            <nav id="main-header" class="nav centerizeContent-wrapper mih(min-content) bdb(1px,solid) whs(nowrap) bg(inherit)">
                <div class="centerizeContent">
                    <section class="nav-left ">
                        <e run='ctx.Link("/")'>
                            Home
                        </e>
                        <e run='ctx.Link("/examples")'>
                            Examples
                        </e>
                        <e run='ctx.Link("/todo")'>
                            TodoMVC
                        </e>
                        <e run='ctx.Link("/links")'>
                            Links
                        </e>
                        <e run='ctx.Link("/about")'>
                            About
                        </e>
                    </section>
                    <section class="nav-right">
                        <span id="theme-toggle" class="d(flex) ai(center) ml(.4em)">
                            <label class="form-switch p(.1rem,.4rem,.1rem,1.2rem)">
                                <input type="checkbox" @change="root.toggleTheme()">
                                <i class="form-icon"></i>
                            </label>
                            <svg xmlns="http://www.w3.org/2000/svg" class="svg-icon" viewBox="0 0 24 24">
                                <g data-name="Layer 2">
                                    <g data-name="moon">
                                        <rect width="24" height="24" opacity="0"/>
                                        <path d="M12.3 22h-.1a10.31 10.31 0 0 1-7.34-3.15 10.46 10.46 0 0 1-.26-14 10.13 10.13 0 0 1 4-2.74 1 1 0 0 1 1.06.22 1 1 0 0 1 .24 1 8.4 8.4 0 0 0 1.94 8.81 8.47 8.47 0 0 0 8.83 1.94 1 1 0 0 1 1.27 1.29A10.16 10.16 0 0 1 19.6 19a10.28 10.28 0 0 1-7.3 3z"/>
                                    </g>
                                </g>
                            </svg>
                        </span>
                    </section>
                </div>
            </nav>

            <main id="main-body" class="main-body p(1.4rem,0)">
                <e run="ctx.GetRouter()"></e>
            </main>

            <e run='scrollTop()'></e>

            <footer id="main-footer" class="mt(auto) bdt(1px,solid) bdc(color-lightGrey) p(.2rem,0) b(inherit) text-grey">
                <div class="centerizeContent d(flex)">
                    <section>
                        <div id="main-footer_createdBy">
                            Created by
                            <a href="https://noartem.github.io/" target="_blank">
                                Noskov Artem
                            </a>
                        </div>
                        <div id="main-footer_createdWith">
                            With
                            <a href="https://github.com/gascore/gas" target="_blank">
                                GAS
                            </a>
                            and 
                            <span id="main-footer_createdWith-love">
                                <svg xmlns="http://www.w3.org/2000/svg" class="svg-icon" viewBox="0 0 24 24">
                                    <g data-name="Layer 2">
                                        <g data-name="heart">
                                            <rect width="24" height="24" opacity="0"></rect>
                                            <path d="M12 21a1 1 0 0 1-.71-.29l-7.77-7.78a5.26 5.26 0 0 1 0-7.4 5.24 5.24 0 0 1 7.4 0L12 6.61l1.08-1.08a5.24 5.24 0 0 1 7.4 0 5.26 5.26 0 0 1 0 7.4l-7.77 7.78A1 1 0 0 1 12 21z"></path>
                                        </g>
                                    </g>
                                </svg>
                            </span>
                        </div>
                    </section>
                    <section class="ml(auto) fz(14px)">
                        <span>Released under the MIT License</span>
                        <br>
                        <span>Copyright Â© 2019</span>
                        <br>
                        <a href="https://github.com/noartem" class="text" target="_blank">Noskov Artem</a>
                        <span> & </span>
                        <a href="https://github.com/orgs/gascore/people" class="text" target="_blank">gas contributors</a>
                    </section>
                </div>
            </footer>
        </div>
    }$
}

func (root *App) toggleTheme() {
    root.isDark = !root.isDark

    if root.isDark {
        // add class
        root.htmlEl.SetAttribute("data-theme", "dark")
    } else { 
        // remove class
        root.htmlEl.ClassList().Add("theme-in-transition")
        root.htmlEl.SetAttribute("data-theme", "light")

        go func() {
            time.Sleep(1 * time.Second)
            root.htmlEl.ClassList().Remove("theme-in-transition")
        }()
    }
}
