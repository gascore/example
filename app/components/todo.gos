package components

import (
	"github.com/gascore/gas"
	r "github.com/gascore/std/router"
)

func TodoList(info *r.RouteInfo) *gas.E {
	root := &TodoPage{
		i: info,
		currentList: info.Params["type"],
	}

	c := &gas.C{
		Root: root,
	}
	root.c = c

	return c.Init()
}

type TodoPage struct {
	c *gas.C
	i *r.RouteInfo

	currentList string
	currentText string

	active    []string
	completed []string
	deleted   []string
}

func (root *TodoPage) Render() []interface{} {
	return $html{
	<div id="todo-page" class="nano-block">
		<div id="todoList" class="boxShadow bg(#fff)">
			<div id="new" class="w(100%) d(flex)">
				<input 
					:value="root.currentText"
					@input="root.currentText = e.Value(); go root.c.Update()"
					@keyup.enter="root.createNewTask()" 
					id="new"
					placeholder="What needs to be done?" 
					class="bd(none) w(90%) p(.8rem) bdrs(.4rem,0,0,0)" />
				<button class="no-btn w(10%)" @click="root.createNewTask()">
					<icon class="icon icon-arrow-right fz(1.1rem) c(mainColor):h"></i>
				</button>
			</div>
			<ul class="todo-list" id="this-fucking-ul">
				<li g-for='i, el := range root.list()' class="mt(0)">
					<e run="getLi(i, root.currentList, el, root)"></e>
				</li>
			</ul>
			<div id="todo-footer" class="d(flex) p(.2rem,.6rem) fz(18px) bdt(1px,solid,#e6e6e6)">
				<nav>
					<a @click="root.changeList(`active`)" :class="root.isActive(`active`)">
						Active
					</a>
					<a @click="root.changeList(`completed`)" :class="root.isActive(`completed`)">
						Completed
					</a>
					<a @click="root.changeList(`deleted`)" :class="root.isActive(`deleted`)">
						Deleted
					</a>
				</nav>
				<button @click="root.clear()" class="btn btn-link ml(auto) fz(18px) p(4px)" id="todo-footer_clear">
					Clear
				</button>
			</div>
		</div>
		<div id="todoListFooter" class="m(8px) c(gray) fz(12px)" g-if="root.currentList == `active`">
			<i>
				Double-click to edit a task
			</i>
		</div>
	</div>
	}$
}

func (root *TodoPage) list() []string {
	switch root.currentList {
	case "active":
		return root.active
	case "completed":
		return root.completed
	case "deleted":
		return root.deleted
	default:
		return []string{}
	}
}

func (root *TodoPage) clear() {
	switch root.currentList {
	case "active":
		root.active = []string{}
	case "completed":
		root.completed = []string{}
	case "deleted":
		root.deleted = []string{}
	}
	go root.c.Update()
}

func (root *TodoPage) createNewTask() {
	root.active = append(root.active, root.currentText)
	root.currentText = ""
	root.changeList("active")
	go root.c.Update()
}

func (root *TodoPage) Delete(i int) {
	deletedItem := root.active[i]
	root.active = append(root.active[:i], root.active[i+1:]...)
	root.deleted = append(root.deleted, deletedItem)
	go root.c.Update()
}

func (root *TodoPage) MarkAsDone(i int) {
	doneItem := root.active[i]
	root.active = append(root.active[:i], root.active[i+1:]...)

	root.completed = append(root.completed, doneItem)

	go root.c.Update()
}

func (root *TodoPage) Edit(i int, newValue string) {
	root.active[i] = newValue
	go root.c.Update()
}

func (root *TodoPage) changeList(name string) {
	root.currentList = name
	ctx.ChangeRoute("/todo/"+name, false)
	go root.c.Update()
}

func (root *TodoPage) isActive(name string) string {
	if root.currentList == name {
		return "active"
	} else {
		return ""
	}
}
