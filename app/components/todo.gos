package components

import (
	"github.com/gascore/gas"
	r "github.com/gascore/std/router"

	. "github.com/gascore/example/app/store"
)

func TodoList(info *r.RouteInfo) *gas.E {
	root := &TodoPage{
		i: info,
		currentList: iByName(info.Params["type"]),
	}

	c := S.RC(&gas.C{
		Root: root,
		Watchers: map[string]gas.Watcher{
			"currentText": func(val interface{}, e gas.Object) (string, error) {
				if val != nil {
					root.currentText = val.(string)
				}

				return root.currentText, nil
			},
		},
	})
	root.c = c

	return c.Init()
}

type TodoPage struct {
	c *gas.C
	i *r.RouteInfo

	currentList int
	currentText string
}

func (root *TodoPage) Render() []interface{} {
	return $html{
	<div id="todo-page" class="nano-block">
		<div id="todoList" class="boxShadow bg(#fff)">
			<div id="new" class="w(100%) d(flex)">
				<input 
					g-watch="currentText" 
					@keyup.enter="root.createNewTask()" 
					id="new"
					placeholder="What needs to be done?" 
					class="bd(none) w(90%) p(.8rem) bdrs(.4rem,0,0,0)" />
				<button class="no-btn w(10%)" @click="root.createNewTask()">
					<icon class="icon icon-arrow-right fz(1.1rem) c(mainColor):h"></i>
				</button>
			</div>
			<ul class="todo-list" id="this-fucking-ul">
				<li g-for="i, el := range root.list()" class="mt(0)">
					<e run="getLi(i, root.currentList, el.(string))"></e>
				</li>
			</ul>
			<div id="todo-footer" class="d(flex) p(.2rem,.6rem) fz(18px) bdt(1px,solid,#e6e6e6)">
				<nav>
					<a @click="root.changeList(0)" g-bind:class="root.isActive(0)">
						Active
					</a>
					<a @click="root.changeList(1)" g-bind:class="root.isActive(1)">
						Completed
					</a>
					<a @click="root.changeList(2)" g-bind:class="root.isActive(2)">
						Deleted
					</a>
				</nav>
				<button @click="S.Emit(`clearList`, nameByI(root.currentList))" class="btn btn-link ml(auto) fz(18px) p(4px)" id="todo-footer_clear">
					Clear
				</button>
			</div>
		</div>
		<div id="todoListFooter" class="m(8px) c(gray) fz(12px)" g-if="root.currentList == 0">
			<i>
				Double-click to edit a task
			</i>
		</div>
	</div>
	}$
}

func (root *TodoPage) list() []interface{} {
	return S.Get(nameByI(root.currentList)).([]interface{})
}

func (root *TodoPage) createNewTask() {
	err := S.Emit("appendToList", "active", root.currentText)
	if err != nil {
		root.c.WarnError(err)
		return
	}

	root.currentText = ""
	root.c.UpdateWatchersValues("currentText", "")
	root.changeList(0)
}

func (root *TodoPage) changeList(i int) {
	root.currentList = i
	ctx.ChangeRoute("/todo/"+nameByI(i), false)
	go root.c.Update()
}

func (root *TodoPage) isActive(i int) string {
	if root.currentList == i {
		return "active"
	} else {
		return ""
	}
}

func nameByI(i int) string {
	switch i {
	case 0:
		return "active"
	case 1:
		return "completed"
	case 2:
		return "deleted"
	default:
		return "active"
	}
}

func iByName(name string) int {
	switch name {
	case "active":
		return 0
	case "completed":
		return 1
	case "deleted":
		return 2
	default:
		return 0
	}
}
