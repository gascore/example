package components

import (
    "github.com/gascore/gas"
	. "github.com/gascore/example/app/store"
)

func getLi(i, listType int, el string) *gas.E {
    root := &TodoLi {
        i: i,
        el: el,
        listType: listType,
    }

    c := &gas.C{
        NotPointer: true,
        Root: root,
        Watchers: map[string]gas.Watcher{
			"newValue": func(val interface{}, e gas.Object) (string, error) {
				if val != nil {
					root.newValue = val.(string)
				}

				return root.newValue, nil
			},
		},
    }
    root.c = c

    return c.Init()
}

type TodoLi struct {
    c *gas.C

    listType int
    i        int
    el       string

    isEditing bool
    newValue  string
}

func (root *TodoLi) Render() []interface{} {
    return $html{
     <div class="li-body bdt(1px,solid,#e6e6e6) fz(18px)">
        <div g-if="root.listType == 0" class="d(flex) p(.3rem,.6rem)">
            <button @click="root.c.WarnError(S.Emit(`completeInActive`, root.i))" class="no-btn m(0,.4rem,0,0)">
                <i class="icon icon-check c(#009966):h:f m(auto,0) h(2rem)"></i>
            </button>
            
            <div class="li-body_data w(100%) m(auto,0)">
                <span g-if="!root.isEditing" @dblclick="root.goEdit()" class="w(100%)">
                    {{ root.el }}
                </span>
                <input 
                    g-else 
                    g-watch="newValue"
                    @keyup.enter="root.goCreate()" 
                    class="c(#3b4351) w(100%) h(100%)"/>
            </div>

            <button g-if="!root.isEditing" @click="root.c.WarnError(S.Emit(`deleteFromActive`, root.i))" class="no-btn m(0,0,0,auto)">
                <i class="icon icon-delete c(#ff0033):h:f m(auto 0)"></i>
            </button>
        </div>
        <div g-else class="p(.6rem,1.2rem)">
            <span class="w(100%)">
                {{ root.el }}
            </span>
        </div>
    </div>
    }$ 
}

func (root *TodoLi) goEdit() {
    //return // TODO: remove it
    if root.listType != 0 {
        return
    }

    root.newValue = root.el
    root.isEditing = true
    go root.c.Update()
}

func (root *TodoLi) goCreate() {
	newValue := root.newValue
    root.c.UpdateWatchersValues("newValue", "")

    root.isEditing = false
    root.newValue = ""

    root.c.Update()

    err := S.Emit("editActive", root.i, newValue)
    if err != nil {
        root.c.WarnError(err)
        return
    }
}