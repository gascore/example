package main

import (
    "github.com/gascore/gas"
    
    "github.com/gascore/dom"
    "github.com/gascore/dom/js"
)

func scrollTop() *gas.C {
    f := &gas.F{}

    isVisible, setIsVisible := f.UseStateBool(false)

    f.UseEffect(func() (func(), error) {
        docEl  := dom.AsElement(js.Value{dom.Doc.JSValue().Get("documentElement")})
        window := dom.GetWindow().JSValue()

        onEvent := jsEvent(func(event dom.Event) {
            newVal := docEl.ScrollTop() > 100
            if newVal != isVisible() {
                setIsVisible(newVal)
            }
        })

        window.Call("addEventListener", "scroll", onEvent)

        return func() {
            window.Call("removeEventListener", "scroll", onEvent)
        }, nil
    })

    return f.Init(true, $htmlF{
        <div>
            <button @click='ScrollToTopWithSmooth()' title="Go top top"  g-if='isVisible()'  class="btn" id="scrollTop">
                <i class="icon icon-arrow-up"></i>
            </button>
        </div>
    }$)
}

func ScrollToTopWithSmooth() {
    obj := js.NewObject()
    obj.Set("top", 0)
    obj.Set("behavior", "smooth")
    dom.GetWindow().JSValue().Call("scrollTo", obj.JSValue())
}

func jsEvent(f func(event dom.Event)) js.Func {
    return js.NewEventCallback(func(v js.Value) {
        f(dom.ConvertEvent(v))
    })
}
